" Vundle
set nocompatible
filetype off " required! for Vundle
so ~/.dotfiles/vim/.vim/plugins.vim
filetype plugin indent on
set encoding=utf-8

au BufRead,BufNewFile *.json set filetype=json

" Enable syntax highlighting
"let g:solarized_termcolors=16
syntax enable
set background=dark
"colorscheme solarized


"------------------------------------------------------------
" Must have options {{{1
"
" These are options that any sane Vim setup should have

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files.  Vim will complain if you try to quit without
" saving.
set hidden

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on.  Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line
set nostartofline

" Better command-line completion
set wildmenu
set wildmode=list:full

set listchars=trail:~,extends:>,precedes:<
set list

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Modelines have historically been a source of security vulnerabilities.  As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline
"

" source the project specific vim file (for C projects)
set exrc
set secure

" treat .h as C only, no CPP
autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen

let &path.="src/include,/usr/local/include"
set makeprg=make\ -C\ build\ -j9
nnoremap <F6> :make!<cr>


"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" changes Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

set ruler

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
"set mouse=a
" enable mouse copy and middle click paste
" set mouse=v might be better?
set mouse=r

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200


"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=2
set softtabstop=2
set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
"set shiftwidth=2
"set tabstop=2


"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" grep for word under cursor in c/cpp/h-files
"map <F9> <Esc>:vim <cword> ./**/*.c* ./**/*.h<CR>
"map <F9> <Esc>:!couchapp push<CR> <CR>
"map <D-/> NERDComToggle

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" remap C-w to get out of Chrome's way
" (running ChromeOS with chroot shell in a Chrome tab
nnoremap <C-Q> <C-W>

" and C-N shouldn't be a new chrome window, but whatever
" http://stackoverflow.com/questions/2269005/how-can-i-change-the-keybinding-used-to-autocomplete-in-vim
"inoremap <Nul> <C-n>

"------------------------------------------------------------
" my basics {{{1

"folding settings
set foldmethod=marker   "fold based on marker
set nofoldenable        "dont fold by default

" lots of command histor
set history=1000

"Apply highlighting automatically whenever text exceeds 80 columns
":au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
hi colorcolumn ctermbg=NONE ctermfg=red
set cc=80

command! W :w

set clipboard=autoselect,unnamed

" my mappings {{{1
"
" Set leader to comma
"let mapleader = ","

" markers should not require pinky dislocation
"nnoremap ' `
"nnoremap ` '

" fast window cycle
"map <leader>\ :wincmd w<CR>

" Make editing .vimrc easier
map <leader>v :sp ~/.dotfiles/vim/.vimrc<CR>
map <leader>V :source ~/.dotfiles/vim/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Generate a tags file in the current directory using Exuberant ctags
" map <leader>e :silent :! ctags -R<CR>:exe ":echo 'tags generated'"<CR>
" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags/cpp
"set tags+=~/.vim/tags/gl
"set tags+=~/.vim/tags/sdl
"set tags+=~/.vim/tags/qt4
" build tags of your own project with Ctrl-F12
map <S-F5> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" automatically open and close the popup menu / preview window
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"set completeopt=menuone,menu,longest,preview

"map <leader>s :silent !screen -X split<CR>:silent !screen -X focus down<CR>:silent !screen -X screen ~/.vim/screener.sh<CR>:redraw!<CR>

" navs buffers F1, Tabs F2
noremap <F1> :bp<CR>
" ^V| see :help map_bar
inoremap <F1> <Esc>:bp<CR>
"inoremap <F1>:let &insertmode=0<CR>:tabp<CR>
noremap <F2> :bn<CR>
nnoremap <C-c> :bn\|bd#<CR>
inoremap <F2> <Esc>:bn<CR>

" To insert timestamp, press F3.
nmap <F3> a<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>

" F4 searches current word recursively
map <F4> :execute "vimgrep /" . expand("<cword>") . "/j app/** config/** src/**" <Bar> cw<CR>

" F5 cleans all trailing whitespace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Use <F7> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F7>

map <F12> :!./go <CR>
"" map notes to ctrl-f
"map <f12> :sp ~/.notes.txt<cr>

"<home> toggles between start of line and start of text
imap <khome> <home>
nmap <khome> <home>
inoremap <silent> <home> <C-O>:call Home()<CR>
nnoremap <silent> <home> :call Home()<CR>
function! Home()
  let curcol = wincol()
  normal ^
  let newcol = wincol()
  if newcol == curcol
    normal 0
  endif
endfunction


"------------------------------------------------------------
" my basics {{{1
"
" don't litter
set backup
set backupdir=~/.vim/tmp/
set writebackup
set directory=~/.vim/tmp/

set cursorline
set scrolloff=3   " Keep the next three lines viewable

"folding settings
set foldmethod=marker   "fold based on marker
set nofoldenable        "dont fold by default

" lots of command histor
set history=1000

"Apply highlighting automatically whenever text exceeds 80 columns
":au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)

if &diff
  "I'm only interested in diff colours
  syntax off
endif

command! W :w

set clipboard=autoselect,unnamed

" navs buffers F1, Tabs F2
noremap <F1> :bp<CR>
" ^V| see :help map_bar
inoremap <F1> <Esc>:bp<CR>
"inoremap <F1>:let &insertmode=0<CR>:tabp<CR>
noremap <F2> :bn<CR>
nnoremap <C-c> :bn\|bd#<CR>
inoremap <F2> <Esc>:bn<CR>

" To insert timestamp, press F3.
nmap <F3> a<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>

" F4 searches current word recursively
map <F4> :execute "vimgrep /" . expand("<cword>") . "/j app/** config/**" <Bar> cw<CR>

" F5 cleans all trailing whitespace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Use <F6> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F7>

map <F12> :!./go <CR>
"" map notes to ctrl-f
"map <f12> :sp ~/.notes.txt<cr>

"<home> toggles between start of line and start of text
imap <khome> <home>
nmap <khome> <home>
inoremap <silent> <home> <C-O>:call Home()<CR>
nnoremap <silent> <home> :call Home()<CR>
function! Home()
  let curcol = wincol()
  normal ^
  let newcol = wincol()
  if newcol == curcol
    normal 0
  endif
endfunction

" Specky Plugin options {{{1
"let g:speckyBannerKey = "<C-S>b"
"let g:speckyQuoteSwitcherKey = "<C-S>'"
"let g:speckyRunRdocKey = "<C-S>r"
"let g:speckySpecSwitcherKey = "<C-S>x"
"let g:speckyRunSpecKey = "<C-S>s"
"let g:speckyBannerKey = "<C-E>b"
"let g:speckySpecSwitcherKey = "<C-E>e"
"let g:speckyRunSpecKey = "<C-E>r"
"let g:speckyRunRdocKey = "<C-E>d"
"let g:speckyWindowType = 1

" FuzzyFinder options {{{1
"let g:fuzzy_ignore = "*.log;vendor/**;coverage/**"
"let g:fuzzy_matching_limit = 40


"" Set up commands for FuzzyFinder and FuzzyFinderTextMate
"map <leader>t :FuzzyFinderTextMate<CR>
"map <leader>f :FuzzyFinderFile **/ <CR>
"map <leader>b :FuzzyFinderBuffer<CR>
""map <leader>f :FuzzyFinderFile<CR>
"map <leader>r :FuzzyFinderMruFile<CR>

"call togglebg#map("<F6>")
"" scrooloose's statusline + scrooloose's ruby syntax checker {{{1
"set statusline=%f       "tail of the filename

""display a warning if fileformat isnt unix
"set statusline+=%#warningmsg#
"set statusline+=%{&ff!='unix'?'['.&ff.']':''}
"set statusline+=%*

""display a warning if file encoding isnt utf-8
"set statusline+=%#warningmsg#
"set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
"set statusline+=%*

"set statusline+=%h      "help file flag
"set statusline+=%y      "filetype
"set statusline+=%r      "read only flag
"set statusline+=%m      "modified flag

"""display a warning if &et is wrong, or we have mixed-indenting
"set statusline+=%#error#
"set statusline+=%{StatuslineTabWarning()}
"set statusline+=%*

"set statusline+=%{StatuslineTrailingSpaceWarning()}

""display a warning if &paste is set
"set statusline+=%#error#
"set statusline+=%{&paste?'[paste]':''}
"set statusline+=%*

"set statusline+=%=      "left/right separator
""set statusline+=%{StatuslineCurrentHighlight()}\ \ "current highlight
"set statusline+=%c,     "cursor column
"set statusline+=%l/%L   "cursor line/total lines
"set statusline+=\ %P    "percent through file
"set laststatus=2

""recalculate the trailing whitespace warning when idle, and after saving
"autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

""return '[\s]' if trailing white space is detected
""return '' otherwise
"function! StatuslineTrailingSpaceWarning()
    "if !exists("b:statusline_trailing_space_warning")
        "if search('\s\+$', 'nw') != 0
            "let b:statusline_trailing_space_warning = '[\s]'
        "else
            "let b:statusline_trailing_space_warning = ''
        "endif
    "endif
    "return b:statusline_trailing_space_warning
"endfunction


""return the syntax highlight group under the cursor ''
"function! StatuslineCurrentHighlight()
    "let name = synIDattr(synID(line('.'),col('.'),1),'name')
    "if name == ''
        "return ''
    "else
        "return '[' . name . ']'
    "endif
"endfunction

""recalculate the tab warning flag when idle and after writing
"autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

""return '[&et]' if &et is set wrong
""return '[mixed-indenting]' if spaces and tabs are used to indent
""return an empty string if everything is fine
"function! StatuslineTabWarning()
    "if !exists("b:statusline_tab_warning")
        "let tabs = search('^\t', 'nw') != 0
        "let spaces = search('^ ', 'nw') != 0

        "if tabs && spaces
            "let b:statusline_tab_warning =  '[mixed-indenting]'
        "elseif (spaces && !&et) || (tabs && &et)
            "let b:statusline_tab_warning = '[&et]'
        "else
            "let b:statusline_tab_warning = ''
        "endif
    "endif
    "return b:statusline_tab_warning
"endfunction

